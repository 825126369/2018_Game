// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_struct.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace XkProtobufData {

  /// <summary>Holder for reflection information generated from proto_struct.proto</summary>
  public static partial class ProtoStructReflection {

    #region Descriptor
    /// <summary>File descriptor for proto_struct.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtoStructReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJwcm90b19zdHJ1Y3QucHJvdG8SEHhrX3Byb3RvYnVmX2RhdGEiPwoRc3Ry",
            "dWN0X3NlcnZlckxpc3QSCgoCaXAYASABKAkSDAoEcG9ydBgCIAEoDRIQCghz",
            "ZXJ2ZXJJZBgDIAEoDSJKCg9zdHJ1Y3RfSXRlbUluZm8SCgoCaWQYASABKAQS",
            "CwoDcG9zGAIgASgNEhAKCGNvbmZpZ0lkGAMgASgNEgwKBGNvdXQYBCABKA0i",
            "ZgoXc3RydWN0X1BsYXllclNpbXBsZUluZm8SCgoCaWQYASABKAQSDAoEbmFt",
            "ZRgCIAEoCRIOCgZnZW5kZXIYAyABKA0SEgoKcHJvZmVzc2lvbhgEIAEoDRIN",
            "CgVsZXZlbBgFIAEoDSKcAQoXc3RydWN0X1BsYXllckRldGFpbEluZm8SCgoC",
            "aWQYASABKAQSDAoEbmFtZRgCIAEoCRIOCgZnZW5kZXIYAyABKA0SEgoKcHJv",
            "ZmVzc2lvbhgEIAEoDRINCgVsZXZlbBgFIAEoDRI0CgllcXVpcExpc3QYBiAD",
            "KAsyIS54a19wcm90b2J1Zl9kYXRhLnN0cnVjdF9JdGVtSW5mbyJcChRzdHJ1",
            "Y3RfUGxheWVyQmFnSW5mbxIPCgdtYXhDb3V0GAEgASgNEjMKCGl0ZW1MaXN0",
            "GAIgAygLMiEueGtfcHJvdG9idWZfZGF0YS5zdHJ1Y3RfSXRlbUluZm8iOQoZ",
            "c3RydWN0X0xPTF9IZXJvRGV0YWlsSW5mbxIKCgJpZBgBIAEoBBIQCghjb25m",
            "aWdJZBgCIAEoDSK7AQoPc3RydWN0X0NoYXRJbmZvEhEKCWNoYW5uZWxJZBgB",
            "IAEoDRI5CgZTZW5kZXIYAiABKAsyKS54a19wcm90b2J1Zl9kYXRhLnN0cnVj",
            "dF9QbGF5ZXJTaW1wbGVJbmZvEjsKCFJlY2VpdmVyGAMgASgLMikueGtfcHJv",
            "dG9idWZfZGF0YS5zdHJ1Y3RfUGxheWVyU2ltcGxlSW5mbxIPCgdUYWxrTXNn",
            "GAQgASgJEgwKBHRpbWUYBSABKARiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::XkProtobufData.struct_serverList), global::XkProtobufData.struct_serverList.Parser, new[]{ "Ip", "Port", "ServerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XkProtobufData.struct_ItemInfo), global::XkProtobufData.struct_ItemInfo.Parser, new[]{ "Id", "Pos", "ConfigId", "Cout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XkProtobufData.struct_PlayerSimpleInfo), global::XkProtobufData.struct_PlayerSimpleInfo.Parser, new[]{ "Id", "Name", "Gender", "Profession", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XkProtobufData.struct_PlayerDetailInfo), global::XkProtobufData.struct_PlayerDetailInfo.Parser, new[]{ "Id", "Name", "Gender", "Profession", "Level", "EquipList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XkProtobufData.struct_PlayerBagInfo), global::XkProtobufData.struct_PlayerBagInfo.Parser, new[]{ "MaxCout", "ItemList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XkProtobufData.struct_LOL_HeroDetailInfo), global::XkProtobufData.struct_LOL_HeroDetailInfo.Parser, new[]{ "Id", "ConfigId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XkProtobufData.struct_ChatInfo), global::XkProtobufData.struct_ChatInfo.Parser, new[]{ "ChannelId", "Sender", "Receiver", "TalkMsg", "Time" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class struct_serverList : pb::IMessage<struct_serverList> {
    private static readonly pb::MessageParser<struct_serverList> _parser = new pb::MessageParser<struct_serverList>(() => new struct_serverList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<struct_serverList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XkProtobufData.ProtoStructReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public struct_serverList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public struct_serverList(struct_serverList other) : this() {
      ip_ = other.ip_;
      port_ = other.port_;
      serverId_ = other.serverId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public struct_serverList Clone() {
      return new struct_serverList(this);
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 1;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 3;
    private uint serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as struct_serverList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(struct_serverList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (ServerId != other.ServerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Port);
      }
      if (ServerId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ServerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(struct_serverList other) {
      if (other == null) {
        return;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Ip = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadUInt32();
            break;
          }
          case 24: {
            ServerId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class struct_ItemInfo : pb::IMessage<struct_ItemInfo> {
    private static readonly pb::MessageParser<struct_ItemInfo> _parser = new pb::MessageParser<struct_ItemInfo>(() => new struct_ItemInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<struct_ItemInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XkProtobufData.ProtoStructReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public struct_ItemInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public struct_ItemInfo(struct_ItemInfo other) : this() {
      id_ = other.id_;
      pos_ = other.pos_;
      configId_ = other.configId_;
      cout_ = other.cout_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public struct_ItemInfo Clone() {
      return new struct_ItemInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private uint pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 3;
    private uint configId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "cout" field.</summary>
    public const int CoutFieldNumber = 4;
    private uint cout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cout {
      get { return cout_; }
      set {
        cout_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as struct_ItemInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(struct_ItemInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Pos != other.Pos) return false;
      if (ConfigId != other.ConfigId) return false;
      if (Cout != other.Cout) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
      if (Cout != 0) hash ^= Cout.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pos);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ConfigId);
      }
      if (Cout != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Cout);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConfigId);
      }
      if (Cout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cout);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(struct_ItemInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.ConfigId != 0) {
        ConfigId = other.ConfigId;
      }
      if (other.Cout != 0) {
        Cout = other.Cout;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            Pos = input.ReadUInt32();
            break;
          }
          case 24: {
            ConfigId = input.ReadUInt32();
            break;
          }
          case 32: {
            Cout = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class struct_PlayerSimpleInfo : pb::IMessage<struct_PlayerSimpleInfo> {
    private static readonly pb::MessageParser<struct_PlayerSimpleInfo> _parser = new pb::MessageParser<struct_PlayerSimpleInfo>(() => new struct_PlayerSimpleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<struct_PlayerSimpleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XkProtobufData.ProtoStructReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public struct_PlayerSimpleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public struct_PlayerSimpleInfo(struct_PlayerSimpleInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      gender_ = other.gender_;
      profession_ = other.profession_;
      level_ = other.level_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public struct_PlayerSimpleInfo Clone() {
      return new struct_PlayerSimpleInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 3;
    private uint gender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "profession" field.</summary>
    public const int ProfessionFieldNumber = 4;
    private uint profession_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Profession {
      get { return profession_; }
      set {
        profession_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as struct_PlayerSimpleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(struct_PlayerSimpleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Gender != other.Gender) return false;
      if (Profession != other.Profession) return false;
      if (Level != other.Level) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Gender != 0) hash ^= Gender.GetHashCode();
      if (Profession != 0) hash ^= Profession.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Gender != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Gender);
      }
      if (Profession != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Profession);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gender);
      }
      if (Profession != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Profession);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(struct_PlayerSimpleInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Gender != 0) {
        Gender = other.Gender;
      }
      if (other.Profession != 0) {
        Profession = other.Profession;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Gender = input.ReadUInt32();
            break;
          }
          case 32: {
            Profession = input.ReadUInt32();
            break;
          }
          case 40: {
            Level = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class struct_PlayerDetailInfo : pb::IMessage<struct_PlayerDetailInfo> {
    private static readonly pb::MessageParser<struct_PlayerDetailInfo> _parser = new pb::MessageParser<struct_PlayerDetailInfo>(() => new struct_PlayerDetailInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<struct_PlayerDetailInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XkProtobufData.ProtoStructReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public struct_PlayerDetailInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public struct_PlayerDetailInfo(struct_PlayerDetailInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      gender_ = other.gender_;
      profession_ = other.profession_;
      level_ = other.level_;
      equipList_ = other.equipList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public struct_PlayerDetailInfo Clone() {
      return new struct_PlayerDetailInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 3;
    private uint gender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "profession" field.</summary>
    public const int ProfessionFieldNumber = 4;
    private uint profession_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Profession {
      get { return profession_; }
      set {
        profession_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "equipList" field.</summary>
    public const int EquipListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::XkProtobufData.struct_ItemInfo> _repeated_equipList_codec
        = pb::FieldCodec.ForMessage(50, global::XkProtobufData.struct_ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::XkProtobufData.struct_ItemInfo> equipList_ = new pbc::RepeatedField<global::XkProtobufData.struct_ItemInfo>();
    /// <summary>
    /// role
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XkProtobufData.struct_ItemInfo> EquipList {
      get { return equipList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as struct_PlayerDetailInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(struct_PlayerDetailInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Gender != other.Gender) return false;
      if (Profession != other.Profession) return false;
      if (Level != other.Level) return false;
      if(!equipList_.Equals(other.equipList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Gender != 0) hash ^= Gender.GetHashCode();
      if (Profession != 0) hash ^= Profession.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      hash ^= equipList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Gender != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Gender);
      }
      if (Profession != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Profession);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Level);
      }
      equipList_.WriteTo(output, _repeated_equipList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gender);
      }
      if (Profession != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Profession);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      size += equipList_.CalculateSize(_repeated_equipList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(struct_PlayerDetailInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Gender != 0) {
        Gender = other.Gender;
      }
      if (other.Profession != 0) {
        Profession = other.Profession;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      equipList_.Add(other.equipList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Gender = input.ReadUInt32();
            break;
          }
          case 32: {
            Profession = input.ReadUInt32();
            break;
          }
          case 40: {
            Level = input.ReadUInt32();
            break;
          }
          case 50: {
            equipList_.AddEntriesFrom(input, _repeated_equipList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class struct_PlayerBagInfo : pb::IMessage<struct_PlayerBagInfo> {
    private static readonly pb::MessageParser<struct_PlayerBagInfo> _parser = new pb::MessageParser<struct_PlayerBagInfo>(() => new struct_PlayerBagInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<struct_PlayerBagInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XkProtobufData.ProtoStructReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public struct_PlayerBagInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public struct_PlayerBagInfo(struct_PlayerBagInfo other) : this() {
      maxCout_ = other.maxCout_;
      itemList_ = other.itemList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public struct_PlayerBagInfo Clone() {
      return new struct_PlayerBagInfo(this);
    }

    /// <summary>Field number for the "maxCout" field.</summary>
    public const int MaxCoutFieldNumber = 1;
    private uint maxCout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxCout {
      get { return maxCout_; }
      set {
        maxCout_ = value;
      }
    }

    /// <summary>Field number for the "itemList" field.</summary>
    public const int ItemListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::XkProtobufData.struct_ItemInfo> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(18, global::XkProtobufData.struct_ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::XkProtobufData.struct_ItemInfo> itemList_ = new pbc::RepeatedField<global::XkProtobufData.struct_ItemInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XkProtobufData.struct_ItemInfo> ItemList {
      get { return itemList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as struct_PlayerBagInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(struct_PlayerBagInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxCout != other.MaxCout) return false;
      if(!itemList_.Equals(other.itemList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxCout != 0) hash ^= MaxCout.GetHashCode();
      hash ^= itemList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxCout != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MaxCout);
      }
      itemList_.WriteTo(output, _repeated_itemList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxCout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxCout);
      }
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(struct_PlayerBagInfo other) {
      if (other == null) {
        return;
      }
      if (other.MaxCout != 0) {
        MaxCout = other.MaxCout;
      }
      itemList_.Add(other.itemList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxCout = input.ReadUInt32();
            break;
          }
          case 18: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class struct_LOL_HeroDetailInfo : pb::IMessage<struct_LOL_HeroDetailInfo> {
    private static readonly pb::MessageParser<struct_LOL_HeroDetailInfo> _parser = new pb::MessageParser<struct_LOL_HeroDetailInfo>(() => new struct_LOL_HeroDetailInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<struct_LOL_HeroDetailInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XkProtobufData.ProtoStructReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public struct_LOL_HeroDetailInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public struct_LOL_HeroDetailInfo(struct_LOL_HeroDetailInfo other) : this() {
      id_ = other.id_;
      configId_ = other.configId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public struct_LOL_HeroDetailInfo Clone() {
      return new struct_LOL_HeroDetailInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 2;
    private uint configId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as struct_LOL_HeroDetailInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(struct_LOL_HeroDetailInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ConfigId != other.ConfigId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(struct_LOL_HeroDetailInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.ConfigId != 0) {
        ConfigId = other.ConfigId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            ConfigId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class struct_ChatInfo : pb::IMessage<struct_ChatInfo> {
    private static readonly pb::MessageParser<struct_ChatInfo> _parser = new pb::MessageParser<struct_ChatInfo>(() => new struct_ChatInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<struct_ChatInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XkProtobufData.ProtoStructReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public struct_ChatInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public struct_ChatInfo(struct_ChatInfo other) : this() {
      channelId_ = other.channelId_;
      Sender = other.sender_ != null ? other.Sender.Clone() : null;
      Receiver = other.receiver_ != null ? other.Receiver.Clone() : null;
      talkMsg_ = other.talkMsg_;
      time_ = other.time_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public struct_ChatInfo Clone() {
      return new struct_ChatInfo(this);
    }

    /// <summary>Field number for the "channelId" field.</summary>
    public const int ChannelIdFieldNumber = 1;
    private uint channelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    /// <summary>Field number for the "Sender" field.</summary>
    public const int SenderFieldNumber = 2;
    private global::XkProtobufData.struct_PlayerSimpleInfo sender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::XkProtobufData.struct_PlayerSimpleInfo Sender {
      get { return sender_; }
      set {
        sender_ = value;
      }
    }

    /// <summary>Field number for the "Receiver" field.</summary>
    public const int ReceiverFieldNumber = 3;
    private global::XkProtobufData.struct_PlayerSimpleInfo receiver_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::XkProtobufData.struct_PlayerSimpleInfo Receiver {
      get { return receiver_; }
      set {
        receiver_ = value;
      }
    }

    /// <summary>Field number for the "TalkMsg" field.</summary>
    public const int TalkMsgFieldNumber = 4;
    private string talkMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TalkMsg {
      get { return talkMsg_; }
      set {
        talkMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 5;
    private ulong time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as struct_ChatInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(struct_ChatInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelId != other.ChannelId) return false;
      if (!object.Equals(Sender, other.Sender)) return false;
      if (!object.Equals(Receiver, other.Receiver)) return false;
      if (TalkMsg != other.TalkMsg) return false;
      if (Time != other.Time) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelId != 0) hash ^= ChannelId.GetHashCode();
      if (sender_ != null) hash ^= Sender.GetHashCode();
      if (receiver_ != null) hash ^= Receiver.GetHashCode();
      if (TalkMsg.Length != 0) hash ^= TalkMsg.GetHashCode();
      if (Time != 0UL) hash ^= Time.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChannelId);
      }
      if (sender_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Sender);
      }
      if (receiver_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Receiver);
      }
      if (TalkMsg.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TalkMsg);
      }
      if (Time != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelId);
      }
      if (sender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sender);
      }
      if (receiver_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Receiver);
      }
      if (TalkMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TalkMsg);
      }
      if (Time != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(struct_ChatInfo other) {
      if (other == null) {
        return;
      }
      if (other.ChannelId != 0) {
        ChannelId = other.ChannelId;
      }
      if (other.sender_ != null) {
        if (sender_ == null) {
          sender_ = new global::XkProtobufData.struct_PlayerSimpleInfo();
        }
        Sender.MergeFrom(other.Sender);
      }
      if (other.receiver_ != null) {
        if (receiver_ == null) {
          receiver_ = new global::XkProtobufData.struct_PlayerSimpleInfo();
        }
        Receiver.MergeFrom(other.Receiver);
      }
      if (other.TalkMsg.Length != 0) {
        TalkMsg = other.TalkMsg;
      }
      if (other.Time != 0UL) {
        Time = other.Time;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChannelId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (sender_ == null) {
              sender_ = new global::XkProtobufData.struct_PlayerSimpleInfo();
            }
            input.ReadMessage(sender_);
            break;
          }
          case 26: {
            if (receiver_ == null) {
              receiver_ = new global::XkProtobufData.struct_PlayerSimpleInfo();
            }
            input.ReadMessage(receiver_);
            break;
          }
          case 34: {
            TalkMsg = input.ReadString();
            break;
          }
          case 40: {
            Time = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
