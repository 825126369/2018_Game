// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_message_two.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace XkProtobufData {

  /// <summary>Holder for reflection information generated from proto_message_two.proto</summary>
  public static partial class ProtoMessageTwoReflection {

    #region Descriptor
    /// <summary>File descriptor for proto_message_two.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtoMessageTwoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chdwcm90b19tZXNzYWdlX3R3by5wcm90bxIQeGtfcHJvdG9idWZfZGF0YRoS",
            "cHJvdG9fc3RydWN0LnByb3RvIkEKCmNzQ2hhdERhdGESEQoJY2hhbm5lbElk",
            "GAEgASgNEg8KB3RhbGtNc2cYAiABKAkSDwoHb3RoZXJJZBgDIAEoBCJRCgpz",
            "Y0NoYXREYXRhEg4KBnJlc3VsdBgBIAEoDRIzCghjaGF0SW5mbxgCIAEoCzIh",
            "LnhrX3Byb3RvYnVmX2RhdGEuc3RydWN0X0NoYXRJbmZvIlIKEWNzUmVnaXN0",
            "ZXJBY2NvdW50EhMKC2FjY291bnROYW1lGAEgASgJEhAKCHBhc3N3b3JkGAIg",
            "ASgJEhYKDnJlcGVhdFBhc3N3b3JkGAMgASgJIiMKEXNjUmVnaXN0ZXJBY2Nv",
            "dW50Eg4KBnJlc3VsdBgBIAEoDSI0Cgtjc0xvZ2luR2FtZRITCgthY2NvdW50",
            "TmFtZRgBIAEoCRIQCghwYXNzd29yZBgCIAEoCSJdCgtzY0xvZ2luR2FtZRIO",
            "CgZyZXN1bHQYASABKA0SGQoRbGFzdFNlbGVjU2VydmVySWQYAiABKA0SIwob",
            "YmVmb3JlTG9naW5SZWNvcmRTZXJ2ZXJMaXN0GAMgAygNIhwKDmNzU2VsZWN0",
            "U2VydmVyEgoKAmlkGAEgASgNIncKDnNjU2VsZWN0U2VydmVyEg4KBnJlc3Vs",
            "dBgBIAEoDRIYChBMYXN0U2VsZWN0Um9sZUlkGAIgASgEEjsKCHJvbGVMaXN0",
            "GAMgAygLMikueGtfcHJvdG9idWZfZGF0YS5zdHJ1Y3RfUGxheWVyRGV0YWls",
            "SW5mbyI9Cgxjc0NyZWF0ZVJvbGUSDAoEbmFtZRgBIAEoCRILCgNzZXgYAiAB",
            "KA0SEgoKcHJvZmVzc2lvbhgDIAEoDSJXCgxzY0NyZWF0ZVJvbGUSDgoGcmVz",
            "dWx0GAEgASgNEjcKBHJvbGUYAiABKAsyKS54a19wcm90b2J1Zl9kYXRhLnN0",
            "cnVjdF9QbGF5ZXJEZXRhaWxJbmZvIh4KDGNzU2VsZWN0Um9sZRIOCgZyb2xl",
            "SWQYASABKAQiHgoMc2NTZWxlY3RSb2xlEg4KBnJlc3VsdBgBIAEoDSIeCgpj",
            "c0VudGVyTWFwEhAKCGNvbmZpZ0lkGAEgASgNIhwKCnNjRW50ZXJNYXASDgoG",
            "cmVzdWx0GAEgASgNYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::XkProtobufData.ProtoStructReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::XkProtobufData.csChatData), global::XkProtobufData.csChatData.Parser, new[]{ "ChannelId", "TalkMsg", "OtherId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XkProtobufData.scChatData), global::XkProtobufData.scChatData.Parser, new[]{ "Result", "ChatInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XkProtobufData.csRegisterAccount), global::XkProtobufData.csRegisterAccount.Parser, new[]{ "AccountName", "Password", "RepeatPassword" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XkProtobufData.scRegisterAccount), global::XkProtobufData.scRegisterAccount.Parser, new[]{ "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XkProtobufData.csLoginGame), global::XkProtobufData.csLoginGame.Parser, new[]{ "AccountName", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XkProtobufData.scLoginGame), global::XkProtobufData.scLoginGame.Parser, new[]{ "Result", "LastSelecServerId", "BeforeLoginRecordServerList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XkProtobufData.csSelectServer), global::XkProtobufData.csSelectServer.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XkProtobufData.scSelectServer), global::XkProtobufData.scSelectServer.Parser, new[]{ "Result", "LastSelectRoleId", "RoleList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XkProtobufData.csCreateRole), global::XkProtobufData.csCreateRole.Parser, new[]{ "Name", "Sex", "Profession" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XkProtobufData.scCreateRole), global::XkProtobufData.scCreateRole.Parser, new[]{ "Result", "Role" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XkProtobufData.csSelectRole), global::XkProtobufData.csSelectRole.Parser, new[]{ "RoleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XkProtobufData.scSelectRole), global::XkProtobufData.scSelectRole.Parser, new[]{ "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XkProtobufData.csEnterMap), global::XkProtobufData.csEnterMap.Parser, new[]{ "ConfigId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XkProtobufData.scEnterMap), global::XkProtobufData.scEnterMap.Parser, new[]{ "Result" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 1100 C->S ChatInfo
  /// </summary>
  public sealed partial class csChatData : pb::IMessage<csChatData> {
    private static readonly pb::MessageParser<csChatData> _parser = new pb::MessageParser<csChatData>(() => new csChatData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csChatData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XkProtobufData.ProtoMessageTwoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csChatData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csChatData(csChatData other) : this() {
      channelId_ = other.channelId_;
      talkMsg_ = other.talkMsg_;
      otherId_ = other.otherId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csChatData Clone() {
      return new csChatData(this);
    }

    /// <summary>Field number for the "channelId" field.</summary>
    public const int ChannelIdFieldNumber = 1;
    private uint channelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    /// <summary>Field number for the "talkMsg" field.</summary>
    public const int TalkMsgFieldNumber = 2;
    private string talkMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TalkMsg {
      get { return talkMsg_; }
      set {
        talkMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "otherId" field.</summary>
    public const int OtherIdFieldNumber = 3;
    private ulong otherId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OtherId {
      get { return otherId_; }
      set {
        otherId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csChatData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csChatData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelId != other.ChannelId) return false;
      if (TalkMsg != other.TalkMsg) return false;
      if (OtherId != other.OtherId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelId != 0) hash ^= ChannelId.GetHashCode();
      if (TalkMsg.Length != 0) hash ^= TalkMsg.GetHashCode();
      if (OtherId != 0UL) hash ^= OtherId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChannelId);
      }
      if (TalkMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TalkMsg);
      }
      if (OtherId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(OtherId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelId);
      }
      if (TalkMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TalkMsg);
      }
      if (OtherId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OtherId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csChatData other) {
      if (other == null) {
        return;
      }
      if (other.ChannelId != 0) {
        ChannelId = other.ChannelId;
      }
      if (other.TalkMsg.Length != 0) {
        TalkMsg = other.TalkMsg;
      }
      if (other.OtherId != 0UL) {
        OtherId = other.OtherId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChannelId = input.ReadUInt32();
            break;
          }
          case 18: {
            TalkMsg = input.ReadString();
            break;
          }
          case 24: {
            OtherId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 1100 S->C 
  /// </summary>
  public sealed partial class scChatData : pb::IMessage<scChatData> {
    private static readonly pb::MessageParser<scChatData> _parser = new pb::MessageParser<scChatData>(() => new scChatData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scChatData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XkProtobufData.ProtoMessageTwoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scChatData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scChatData(scChatData other) : this() {
      result_ = other.result_;
      ChatInfo = other.chatInfo_ != null ? other.ChatInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scChatData Clone() {
      return new scChatData(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private uint result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "chatInfo" field.</summary>
    public const int ChatInfoFieldNumber = 2;
    private global::XkProtobufData.struct_ChatInfo chatInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::XkProtobufData.struct_ChatInfo ChatInfo {
      get { return chatInfo_; }
      set {
        chatInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scChatData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scChatData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (!object.Equals(ChatInfo, other.ChatInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (chatInfo_ != null) hash ^= ChatInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Result);
      }
      if (chatInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ChatInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Result);
      }
      if (chatInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChatInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scChatData other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.chatInfo_ != null) {
        if (chatInfo_ == null) {
          chatInfo_ = new global::XkProtobufData.struct_ChatInfo();
        }
        ChatInfo.MergeFrom(other.ChatInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadUInt32();
            break;
          }
          case 18: {
            if (chatInfo_ == null) {
              chatInfo_ = new global::XkProtobufData.struct_ChatInfo();
            }
            input.ReadMessage(chatInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 1101 C->S RegisterAccount
  /// </summary>
  public sealed partial class csRegisterAccount : pb::IMessage<csRegisterAccount> {
    private static readonly pb::MessageParser<csRegisterAccount> _parser = new pb::MessageParser<csRegisterAccount>(() => new csRegisterAccount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csRegisterAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XkProtobufData.ProtoMessageTwoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csRegisterAccount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csRegisterAccount(csRegisterAccount other) : this() {
      accountName_ = other.accountName_;
      password_ = other.password_;
      repeatPassword_ = other.repeatPassword_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csRegisterAccount Clone() {
      return new csRegisterAccount(this);
    }

    /// <summary>Field number for the "accountName" field.</summary>
    public const int AccountNameFieldNumber = 1;
    private string accountName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountName {
      get { return accountName_; }
      set {
        accountName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "repeatPassword" field.</summary>
    public const int RepeatPasswordFieldNumber = 3;
    private string repeatPassword_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RepeatPassword {
      get { return repeatPassword_; }
      set {
        repeatPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csRegisterAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csRegisterAccount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountName != other.AccountName) return false;
      if (Password != other.Password) return false;
      if (RepeatPassword != other.RepeatPassword) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountName.Length != 0) hash ^= AccountName.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (RepeatPassword.Length != 0) hash ^= RepeatPassword.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountName);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (RepeatPassword.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RepeatPassword);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountName);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (RepeatPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RepeatPassword);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csRegisterAccount other) {
      if (other == null) {
        return;
      }
      if (other.AccountName.Length != 0) {
        AccountName = other.AccountName;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.RepeatPassword.Length != 0) {
        RepeatPassword = other.RepeatPassword;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountName = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            RepeatPassword = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 1101 S->C
  /// </summary>
  public sealed partial class scRegisterAccount : pb::IMessage<scRegisterAccount> {
    private static readonly pb::MessageParser<scRegisterAccount> _parser = new pb::MessageParser<scRegisterAccount>(() => new scRegisterAccount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scRegisterAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XkProtobufData.ProtoMessageTwoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scRegisterAccount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scRegisterAccount(scRegisterAccount other) : this() {
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scRegisterAccount Clone() {
      return new scRegisterAccount(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private uint result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scRegisterAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scRegisterAccount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scRegisterAccount other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 1102 C->S
  /// </summary>
  public sealed partial class csLoginGame : pb::IMessage<csLoginGame> {
    private static readonly pb::MessageParser<csLoginGame> _parser = new pb::MessageParser<csLoginGame>(() => new csLoginGame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csLoginGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XkProtobufData.ProtoMessageTwoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csLoginGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csLoginGame(csLoginGame other) : this() {
      accountName_ = other.accountName_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csLoginGame Clone() {
      return new csLoginGame(this);
    }

    /// <summary>Field number for the "accountName" field.</summary>
    public const int AccountNameFieldNumber = 1;
    private string accountName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountName {
      get { return accountName_; }
      set {
        accountName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csLoginGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csLoginGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountName != other.AccountName) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountName.Length != 0) hash ^= AccountName.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountName);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountName);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csLoginGame other) {
      if (other == null) {
        return;
      }
      if (other.AccountName.Length != 0) {
        AccountName = other.AccountName;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountName = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 1102,5002,S->C
  /// </summary>
  public sealed partial class scLoginGame : pb::IMessage<scLoginGame> {
    private static readonly pb::MessageParser<scLoginGame> _parser = new pb::MessageParser<scLoginGame>(() => new scLoginGame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scLoginGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XkProtobufData.ProtoMessageTwoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scLoginGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scLoginGame(scLoginGame other) : this() {
      result_ = other.result_;
      lastSelecServerId_ = other.lastSelecServerId_;
      beforeLoginRecordServerList_ = other.beforeLoginRecordServerList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scLoginGame Clone() {
      return new scLoginGame(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private uint result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "lastSelecServerId" field.</summary>
    public const int LastSelecServerIdFieldNumber = 2;
    private uint lastSelecServerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastSelecServerId {
      get { return lastSelecServerId_; }
      set {
        lastSelecServerId_ = value;
      }
    }

    /// <summary>Field number for the "beforeLoginRecordServerList" field.</summary>
    public const int BeforeLoginRecordServerListFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_beforeLoginRecordServerList_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> beforeLoginRecordServerList_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> BeforeLoginRecordServerList {
      get { return beforeLoginRecordServerList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scLoginGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scLoginGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (LastSelecServerId != other.LastSelecServerId) return false;
      if(!beforeLoginRecordServerList_.Equals(other.beforeLoginRecordServerList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (LastSelecServerId != 0) hash ^= LastSelecServerId.GetHashCode();
      hash ^= beforeLoginRecordServerList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Result);
      }
      if (LastSelecServerId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LastSelecServerId);
      }
      beforeLoginRecordServerList_.WriteTo(output, _repeated_beforeLoginRecordServerList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Result);
      }
      if (LastSelecServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastSelecServerId);
      }
      size += beforeLoginRecordServerList_.CalculateSize(_repeated_beforeLoginRecordServerList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scLoginGame other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.LastSelecServerId != 0) {
        LastSelecServerId = other.LastSelecServerId;
      }
      beforeLoginRecordServerList_.Add(other.beforeLoginRecordServerList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadUInt32();
            break;
          }
          case 16: {
            LastSelecServerId = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            beforeLoginRecordServerList_.AddEntriesFrom(input, _repeated_beforeLoginRecordServerList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 1103,C->S
  /// </summary>
  public sealed partial class csSelectServer : pb::IMessage<csSelectServer> {
    private static readonly pb::MessageParser<csSelectServer> _parser = new pb::MessageParser<csSelectServer>(() => new csSelectServer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csSelectServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XkProtobufData.ProtoMessageTwoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csSelectServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csSelectServer(csSelectServer other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csSelectServer Clone() {
      return new csSelectServer(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csSelectServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csSelectServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csSelectServer other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 1103,S->C
  /// </summary>
  public sealed partial class scSelectServer : pb::IMessage<scSelectServer> {
    private static readonly pb::MessageParser<scSelectServer> _parser = new pb::MessageParser<scSelectServer>(() => new scSelectServer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scSelectServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XkProtobufData.ProtoMessageTwoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scSelectServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scSelectServer(scSelectServer other) : this() {
      result_ = other.result_;
      lastSelectRoleId_ = other.lastSelectRoleId_;
      roleList_ = other.roleList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scSelectServer Clone() {
      return new scSelectServer(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private uint result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "LastSelectRoleId" field.</summary>
    public const int LastSelectRoleIdFieldNumber = 2;
    private ulong lastSelectRoleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastSelectRoleId {
      get { return lastSelectRoleId_; }
      set {
        lastSelectRoleId_ = value;
      }
    }

    /// <summary>Field number for the "roleList" field.</summary>
    public const int RoleListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::XkProtobufData.struct_PlayerDetailInfo> _repeated_roleList_codec
        = pb::FieldCodec.ForMessage(26, global::XkProtobufData.struct_PlayerDetailInfo.Parser);
    private readonly pbc::RepeatedField<global::XkProtobufData.struct_PlayerDetailInfo> roleList_ = new pbc::RepeatedField<global::XkProtobufData.struct_PlayerDetailInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XkProtobufData.struct_PlayerDetailInfo> RoleList {
      get { return roleList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scSelectServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scSelectServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (LastSelectRoleId != other.LastSelectRoleId) return false;
      if(!roleList_.Equals(other.roleList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (LastSelectRoleId != 0UL) hash ^= LastSelectRoleId.GetHashCode();
      hash ^= roleList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Result);
      }
      if (LastSelectRoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(LastSelectRoleId);
      }
      roleList_.WriteTo(output, _repeated_roleList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Result);
      }
      if (LastSelectRoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastSelectRoleId);
      }
      size += roleList_.CalculateSize(_repeated_roleList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scSelectServer other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.LastSelectRoleId != 0UL) {
        LastSelectRoleId = other.LastSelectRoleId;
      }
      roleList_.Add(other.roleList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadUInt32();
            break;
          }
          case 16: {
            LastSelectRoleId = input.ReadUInt64();
            break;
          }
          case 26: {
            roleList_.AddEntriesFrom(input, _repeated_roleList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 1104,C->S 
  /// </summary>
  public sealed partial class csCreateRole : pb::IMessage<csCreateRole> {
    private static readonly pb::MessageParser<csCreateRole> _parser = new pb::MessageParser<csCreateRole>(() => new csCreateRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csCreateRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XkProtobufData.ProtoMessageTwoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csCreateRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csCreateRole(csCreateRole other) : this() {
      name_ = other.name_;
      sex_ = other.sex_;
      profession_ = other.profession_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csCreateRole Clone() {
      return new csCreateRole(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 2;
    private uint sex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "profession" field.</summary>
    public const int ProfessionFieldNumber = 3;
    private uint profession_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Profession {
      get { return profession_; }
      set {
        profession_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csCreateRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csCreateRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Sex != other.Sex) return false;
      if (Profession != other.Profession) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (Profession != 0) hash ^= Profession.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Sex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Sex);
      }
      if (Profession != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Profession);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sex);
      }
      if (Profession != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Profession);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csCreateRole other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.Profession != 0) {
        Profession = other.Profession;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Sex = input.ReadUInt32();
            break;
          }
          case 24: {
            Profession = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 1104,5002,S->C
  /// </summary>
  public sealed partial class scCreateRole : pb::IMessage<scCreateRole> {
    private static readonly pb::MessageParser<scCreateRole> _parser = new pb::MessageParser<scCreateRole>(() => new scCreateRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scCreateRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XkProtobufData.ProtoMessageTwoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scCreateRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scCreateRole(scCreateRole other) : this() {
      result_ = other.result_;
      Role = other.role_ != null ? other.Role.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scCreateRole Clone() {
      return new scCreateRole(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private uint result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 2;
    private global::XkProtobufData.struct_PlayerDetailInfo role_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::XkProtobufData.struct_PlayerDetailInfo Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scCreateRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scCreateRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (!object.Equals(Role, other.Role)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (role_ != null) hash ^= Role.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Result);
      }
      if (role_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Role);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Result);
      }
      if (role_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Role);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scCreateRole other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.role_ != null) {
        if (role_ == null) {
          role_ = new global::XkProtobufData.struct_PlayerDetailInfo();
        }
        Role.MergeFrom(other.Role);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadUInt32();
            break;
          }
          case 18: {
            if (role_ == null) {
              role_ = new global::XkProtobufData.struct_PlayerDetailInfo();
            }
            input.ReadMessage(role_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 1105,C->S
  /// </summary>
  public sealed partial class csSelectRole : pb::IMessage<csSelectRole> {
    private static readonly pb::MessageParser<csSelectRole> _parser = new pb::MessageParser<csSelectRole>(() => new csSelectRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csSelectRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XkProtobufData.ProtoMessageTwoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csSelectRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csSelectRole(csSelectRole other) : this() {
      roleId_ = other.roleId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csSelectRole Clone() {
      return new csSelectRole(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csSelectRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csSelectRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0UL) hash ^= RoleId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csSelectRole other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0UL) {
        RoleId = other.RoleId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 1105,S->C
  /// </summary>
  public sealed partial class scSelectRole : pb::IMessage<scSelectRole> {
    private static readonly pb::MessageParser<scSelectRole> _parser = new pb::MessageParser<scSelectRole>(() => new scSelectRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scSelectRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XkProtobufData.ProtoMessageTwoReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scSelectRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scSelectRole(scSelectRole other) : this() {
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scSelectRole Clone() {
      return new scSelectRole(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private uint result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scSelectRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scSelectRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scSelectRole other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class csEnterMap : pb::IMessage<csEnterMap> {
    private static readonly pb::MessageParser<csEnterMap> _parser = new pb::MessageParser<csEnterMap>(() => new csEnterMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csEnterMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XkProtobufData.ProtoMessageTwoReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csEnterMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csEnterMap(csEnterMap other) : this() {
      configId_ = other.configId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csEnterMap Clone() {
      return new csEnterMap(this);
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private uint configId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csEnterMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csEnterMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigId != other.ConfigId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csEnterMap other) {
      if (other == null) {
        return;
      }
      if (other.ConfigId != 0) {
        ConfigId = other.ConfigId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class scEnterMap : pb::IMessage<scEnterMap> {
    private static readonly pb::MessageParser<scEnterMap> _parser = new pb::MessageParser<scEnterMap>(() => new scEnterMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scEnterMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XkProtobufData.ProtoMessageTwoReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scEnterMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scEnterMap(scEnterMap other) : this() {
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scEnterMap Clone() {
      return new scEnterMap(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private uint result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scEnterMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scEnterMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scEnterMap other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
